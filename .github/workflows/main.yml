# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
#  pull_request:
#    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
#       - name: Set up JDK 11
#         uses: actions/setup-java@v1
#         with:
#           java-version: 1.11
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build ./aspnetapp.sln --configuration Release
        
#       - name: Cache SonarQube packages
#         uses: actions/cache@v1
#         with:
#          path: ~\sonar\cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#       - name: Cache SonarQube scanner
#         id: cache-sonar-scanner
#         uses: actions/cache@v1
#         with:
#          path: .\.sonar\scanner
#          key: ${{ runner.os }}-sonar-scanner
#          restore-keys: ${{ runner.os }}-sonar-scanner
#       - name: Install SonarQube scanner
#         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#         shell: pwsh
#         run: |
#          New-Item -Path .\.sonar\scanner -ItemType Directory
#          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
#       - name: Build and analyze
#   #      env:
#   #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#         shell: pwsh
#         run: |
#          .\.sonar\scanner\dotnet-sonarscanner begin /k:"cicd-test-key" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="http://localhost:9000"
#          dotnet build ./aspnetapp.sln --configuration Release
#          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
     
#### Build Docker image

      - name: Docker Build & Push Action
  # You may pin to the exact commit or the version.
  # uses: mr-smithers-excellent/docker-build-push@a7fe6652db5c7274374844e81692992f5a2befb9
        uses: mr-smithers-excellent/docker-build-push@v5.6
        with:
        # Name of the Docker image
          image: remusadvanced/appmod-devops
          # Tags override for Docker image
          tags: 0.02
          # Target Docker registry
          registry: docker.io
          # Location of Dockerfile, if not Dockerfile in root directory
          dockerfile: C:\\aspnet\\Dockerfile
        
          # Docker registry username
          username: remusadvanced
       #      username: "${{ secrets.CONTAINER_REPO_USERNAME }}"
          # Docker registry password
          password: ${{ secrets.CONTAINER_REPO_PASSWORD }}
